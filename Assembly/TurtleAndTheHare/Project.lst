Microsoft (R) Macro Assembler Version 10.00.30319.01	    05/29/11 18:01:32
#MASM FinalProblem5					(Final5.asm  Page 1 - 1


				TITLE MASM FinalProblem5					(Final5.asm)
				;---------------------------------------------------------------------------;
				; Name: Jonah Brooks						Class: CS271 Fall 2010			;
				; Date: 12-03-2010							Problem: Final, problem 5		;
				;																			;
				;	Description:															;
				;		Simulates tortoise and the hare in a console window					;
				;	EAX: loopDelay				DI: turtlePos		SI: harePos				;
				;	EDX: OFFSET track			CL:	winStatus		CH: loopCount (time)	;
				;---------------------------------------------------------------------------;
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000  00000046 [			track BYTE 70 DUP (" "), "|", 0
	    20
	   ] 7C 00
 00000048 4F 55 43 48 21		ouchMsg		 BYTE "OUCH!!!", 0	
	   21 21 00
 00000050 54 4F 52 54 4F		turtleWinMsg BYTE "TORTOISE WINS!!! YAY!!!", 0Ah, 0Dh, 0
	   49 53 45 20 57
	   49 4E 53 21 21
	   21 20 59 41 59
	   21 21 21 0A 0D
	   00
 0000006A 48 61 72 65 20		hareWinMsg   BYTE "Hare wins. Yuch.", 0Ah, 0Dh, 0
	   77 69 6E 73 2E
	   20 59 75 63 68
	   2E 0A 0D 00
 0000007D 49 74 27 73 20		tieMsg		 BYTE "It's a tie.", 0Ah, 0Dh, 0
	   61 20 74 69 65
	   2E 0A 0D 00
 0000008B 54 49 4D 45 20		timeMsg		 BYTE "TIME ELAPSED = ", 0
	   45 4C 41 50 53
	   45 44 20 3D 20
	   00
 0000009B 20 73 65 63 6F		secMsg		 BYTE " seconds", 0Ah, 0Dh, 0
	   6E 64 73 0A 0D
	   00
 000000A6 4F 4E 20 59 4F		startMsg	 BYTE "ON YOUR MARK, GET SET ", 0Ah, 0Dh,
	   55 52 20 4D 41
	   52 4B 2C 20 47
	   45 54 20 53 45
	   54 20 0A 0D 42
	   41 4E 47 20 21
	   21 21 21 20 0A
	   0D 41 4E 44 20
	   54 48 45 59 27
	   52 45 20 4F 46
	   46 20 21 21 21
	   21 0A 0D 00
									  "BANG !!!! ", 0Ah, 0Dh,
									  "AND THEY'RE OFF !!!!", 0Ah, 0Dh, 0
 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call ClrScr
 00000005  E8 00000000 E		call Randomize
 0000000A  BA 000000A6 R		MOV EDX, OFFSET startMsg
 0000000F  E8 00000000 E		call WriteString
 00000014  BA 00000000 R		MOV EDX, OFFSET track
 00000019  B8 000003E8			MOV EAX, 1000		; loopDelay
 0000001E  BF 00000000			MOV EDI, 0			; Starting turtlePos
 00000023  BE 00000000			MOV ESI, 0			; Starting harePos
 00000028  B1 00			MOV CL, 0			; Initialize winStatus to 0
 0000002A  B5 00			MOV CH, 0			; Time = 0 seconds

 0000002C			 gameLoop:
 0000002C  E8 00000036			call MoveTurtle		; move the turtle and update string, DI = turtlePos
 00000031  E8 00000086			call MoveHare		; move hare and update string, SI = harePos

 00000036  E8 00000000 E		call WriteString	; Display the track to the screen
 0000003B  66| 3B FE			CMP DI, SI			; compare turtlePos to harePos
 0000003E  75 05			JNE dontShowOuch
 00000040  E8 000000DF				call PrintOuch	; Overwrite the track with the word "OUCH!!!"
 00000045			    dontShowOuch:
 00000045  E8 00000000 E		call Crlf

 0000004A  E8 00000000 E		call Delay		; Wait one second
 0000004F  FE C5			INC CH			; Add one second to loopCount, to keep track of total time ellapsed
								;Check CL for win condition
								; 0: no win yet,		1: Turtle,		2: Hare,		3: Tie
 00000051  80 F9 00			CMP CL, 0			
 00000054  74 D6				JE gameLoop		; run this loop again if no one has won yet
					
 00000056  E8 000000EF			call DisplayWinMsg
 0000005B  E8 00000000 E		call WaitMsg
					exit
 00000067			main ENDP

				;---------------------------------------------------------------------------;
				;	MoveTurtle:																;
				;			Calculates a random number between 1-10 to determine how the	;
				;		turtle should move. Updates the string to erase the old turtle and	;
				;		draw the new turtle, also updates DI with the new position			;
				;	Receives:	DI = Turtle's current position								;
				;	Returns:	DI = Turtle's new position									;
				;				CL = winStatus (0: no win, 1: turtle wins, 3: tie with hare);
				;---------------------------------------------------------------------------;
 00000067			MoveTurtle PROC USES EAX EDX
 00000069  66| 3B FE			CMP DI, SI
 0000006C  74 08			JE dontKillTheHare			; If the hare didn't just move into it...
 0000006E  C6 04 3D				MOV track[DI], " "		; ...clear the turtle's current position
	   00000000 R 20
 00000076				dontKillTheHare:

						; ----- Update Position With Random Rolls ------
 00000076  B8 0000000A			MOV EAX, 10
 0000007B  E8 00000000 E		call RandomRange
 00000080  40				INC EAX		; Range from 1 to 10 inclusive
					
 00000081  83 F8 05			CMP EAX, 5
 00000084  7F 06			JG notFastPlod
 00000086			  fastPlod: 
 00000086  66| 83 C7 03				ADD DI, 3		; fastPlod, move forward 3
 0000008A  EB 0F			    JMP doneMovingTurtle
 0000008C			  notFastPlod:
 0000008C  83 F8 07			CMP EAX, 7
 0000008F  7F 06			JG slowPlod
 00000091			  slip:
 00000091  66| 83 EF 06				SUB DI, 6	; slip, move backward 6
 00000095  EB 04				JMP doneMovingTurtle
 00000097			  slowPlod:
 00000097  66| 83 C7 01				ADD DI, 1		; slowPlod, move forward 1

 0000009B			  doneMovingTurtle:

						; ----- Validate Position -----
 0000009B  66| 83 FF 00			CMP DI, 0
 0000009F  7D 04			JNL onTrack1
 000000A1  66| BF 0000				MOV DI, 0		; Don't slip past the starting line
 000000A5			    onTrack1:
					
 000000A5  66| 83 FF 45			CMP DI, 69
 000000A9  7C 06			JL onTrack2
 000000AB  66| BF 0045				MOV DI, 69		; Stop at the finish line
 000000AF  FE C1				INC CL			; Add one to CL, to indicate that the turtle passed the finish line
 000000B1				onTrack2:
						
						; ---- Update Position in registers and string ----
 000000B1  C6 04 3D			MOV track[DI], "T"		; Fill in the turtle's new position
	   00000000 R 54
					ret
 000000BC			MoveTurtle ENDP

				;---------------------------------------------------------------------------;
				;	MoveHare:																;
				;			Calculates a random number between 1-10 to determine how the	;
				;		hare should move. Updates the string to erase the old hare and		;
				;		draw the new hare, also updates SI with the new position			;
				;	Receives:	SI = Turtle's current position								;
				;	Returns:	SI = Turtle's new position									;
				;				CL = winStatus (0: no win, 2: hare wins, 3: tie with turtle);
				;---------------------------------------------------------------------------;
 000000BC			MoveHare PROC USES EAX EDX
 000000BE  66| 3B FE			CMP DI, SI
 000000C1  74 08			JE dontKillTheTurtle			; If the turtle didn't just move into it...
 000000C3  C6 04 35				MOV track[SI], " "			; ...clear the hare's current position
	   00000000 R 20
 000000CB				dontKillTheTurtle:		

						; ----- Update Position With Random Rolls ------
 000000CB  B8 0000000A			MOV EAX, 10
 000000D0  E8 00000000 E		call RandomRange
 000000D5  40				INC EAX		; Range from 1 to 10 inclusive
					
 000000D6  83 F8 02			CMP EAX, 2
 000000D9  7F 02			JG notSleep
 000000DB			  zzz: 
 000000DB  EB 25			    JMP doneMovingHare	; sleep, don't move the hare
 000000DD			  notSleep:
 000000DD  83 F8 04			CMP EAX, 4
 000000E0  7F 06			JG notBigHop
 000000E2			  bigHop:
 000000E2  66| 83 C6 09				ADD SI, 9			; bigHop, jump forward 9
 000000E6  EB 1A				JMP doneMovingHare
 000000E8			  notBigHop:
 000000E8  83 F8 05			CMP EAX, 5
 000000EB  7F 06			JG notBigSlip
 000000ED			  bigSlip:
 000000ED  66| 83 EE 0C				SUB SI, 12			; bigSlip, move back 12
 000000F1  EB 0F				JMP doneMovingHare
 000000F3			  notBigSlip:
 000000F3  83 F8 08			CMP EAX, 8
 000000F6  7F 06			JG smallSlip
 000000F8			  smallHop:
 000000F8  66| 83 C6 01				ADD SI, 1			; smallHop, move forward 1
 000000FC  EB 04				JMP doneMovingHare
 000000FE			  smallSlip:
 000000FE  66| 83 EE 02				SUB SI, 2			; smallSlip, move backward 2

 00000102			  doneMovingHare:

						; ----- Validate Position -----
 00000102  66| 83 FE 00			CMP SI, 0
 00000106  7D 04			JNL onTrack1
 00000108  66| BE 0000				MOV SI, 0		; Don't slip past the starting line
 0000010C			    onTrack1:
					
 0000010C  66| 83 FE 45			CMP SI, 69
 00000110  7C 07			JL onTrack2
 00000112  66| BE 0045				MOV SI, 69		; Stop at the finish line
 00000116  80 C1 02				ADD CL, 2		; Add two to CL, to indicate that the hare passed the finish line
 00000119				onTrack2:
						
						; ---- Update Position in registers and string ----
 00000119  C6 04 35			MOV track[SI], "H"
	   00000000 R 48
					ret
 00000124			MoveHare ENDP

				;---------------------------------------------------------------------------;
				;	PrintOuch:																;
				;			Prints the word "OUCH!!!" over the track, starting at the		;
				;		position of the turtle, which is held in DI							;
				;	Receives:	DI = Turtle's current position								;
				;	Returns:	Nothing, it just prints to the screen						;
				;---------------------------------------------------------------------------;
 00000124			PrintOuch PROC USES EAX ECX EDX
 00000127  BA 00000048 R		MOV EDX, OFFSET ouchMsg
 0000012C  B0 0D			MOV AL, 0Dh			; Print a carriage return to write over the track...
 0000012E  E8 00000000 E		call WriteChar		; ... to keep the "Finish Line" character at the end
 00000133  B0 20			MOV AL, " "	
 00000135  0F BF CF			MOVSX ECX, DI
 00000138  E3 07			JECXZ postIndentation
 0000013A			 lIndentToTurtle:
 0000013A  E8 00000000 E		  call WriteChar		; Print spaces starting at index 0 and going to turtlePos
 0000013F  E2 F9			LOOP lIndentToTurtle
 00000141			 postIndentation:
 00000141  E8 00000000 E		call WriteString		; Display "OUCH!!!" at that position
					ret
 0000014A			PrintOuch ENDP

				;---------------------------------------------------------------------------;
				;	DisplayWinMsg:															;
				;			Recieves the winStatus variable in register CL, and prints the	;
				;		corresponding win message and the total time elapsed during the race;
				;	Receives:	CL = {1: turtle wins, 2: hare wins, 3: race was a tie}		;								;
				;	Returns:	Nothing, it only displays output to the screen				;
				;---------------------------------------------------------------------------;
 0000014A			DisplayWinMsg PROC USES EDX EAX
 0000014C  80 F9 02			CMP CL, 2			; The "middle" win condition
 0000014F  74 04			JE hareWins			; If CL equals 2, the hare won
 00000151  7C 09			JL turtleWins
 00000153  7F 0E			JG tie
					
 00000155				hareWins:
 00000155  BA 0000006A R			MOV EDX, OFFSET HareWinMsg
 0000015A  EB 0C				JMP resultsAreIn
 0000015C				turtleWins:
 0000015C  BA 00000050 R			MOV EDX, OFFSET TurtleWinMsg
 00000161  EB 05				JMP resultsAreIn
 00000163				tie:
 00000163  BA 0000007D R			MOV EDX, OFFSET TieMsg

 00000168				resultsAreIn:
 00000168  E8 00000000 E			call WriteString	; Print the fanfare for the winning animal 
 0000016D  BA 0000008B R		MOV EDX, OFFSET timeMsg
 00000172  E8 00000000 E		call WriteString
 00000177  0F BE C5			MOVSX EAX, CH			; Move the loopCount into EAX to print
 0000017A  E8 00000000 E		call WriteDec			; Print that number to the screen
 0000017F  BA 0000009B R		MOV EDX, OFFSET secMsg			
 00000184  E8 00000000 E		call WriteString		; And print the " seconds" to end it
					ret
 0000018C			DisplayWinMsg ENDP

				END main
Microsoft (R) Macro Assembler Version 10.00.30319.01	    05/29/11 18:01:32
#MASM FinalProblem5					(Final5.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000E1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000018C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayWinMsg  . . . . . . . . .	P Near	 0000014A _TEXT	Length= 00000042 Public STDCALL
  hareWins . . . . . . . . . . .	L Near	 00000155 _TEXT	
  turtleWins . . . . . . . . . .	L Near	 0000015C _TEXT	
  tie  . . . . . . . . . . . . .	L Near	 00000163 _TEXT	
  resultsAreIn . . . . . . . . .	L Near	 00000168 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveHare . . . . . . . . . . . .	P Near	 000000BC _TEXT	Length= 00000068 Public STDCALL
  dontKillTheTurtle  . . . . . .	L Near	 000000CB _TEXT	
  zzz  . . . . . . . . . . . . .	L Near	 000000DB _TEXT	
  notSleep . . . . . . . . . . .	L Near	 000000DD _TEXT	
  bigHop . . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  notBigHop  . . . . . . . . . .	L Near	 000000E8 _TEXT	
  bigSlip  . . . . . . . . . . .	L Near	 000000ED _TEXT	
  notBigSlip . . . . . . . . . .	L Near	 000000F3 _TEXT	
  smallHop . . . . . . . . . . .	L Near	 000000F8 _TEXT	
  smallSlip  . . . . . . . . . .	L Near	 000000FE _TEXT	
  doneMovingHare . . . . . . . .	L Near	 00000102 _TEXT	
  onTrack1 . . . . . . . . . . .	L Near	 0000010C _TEXT	
  onTrack2 . . . . . . . . . . .	L Near	 00000119 _TEXT	
MoveTurtle . . . . . . . . . . .	P Near	 00000067 _TEXT	Length= 00000055 Public STDCALL
  dontKillTheHare  . . . . . . .	L Near	 00000076 _TEXT	
  fastPlod . . . . . . . . . . .	L Near	 00000086 _TEXT	
  notFastPlod  . . . . . . . . .	L Near	 0000008C _TEXT	
  slip . . . . . . . . . . . . .	L Near	 00000091 _TEXT	
  slowPlod . . . . . . . . . . .	L Near	 00000097 _TEXT	
  doneMovingTurtle . . . . . . .	L Near	 0000009B _TEXT	
  onTrack1 . . . . . . . . . . .	L Near	 000000A5 _TEXT	
  onTrack2 . . . . . . . . . . .	L Near	 000000B1 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintOuch  . . . . . . . . . . .	P Near	 00000124 _TEXT	Length= 00000026 Public STDCALL
  lIndentToTurtle  . . . . . . .	L Near	 0000013A _TEXT	
  postIndentation  . . . . . . .	L Near	 00000141 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000067 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000002C _TEXT	
  dontShowOuch . . . . . . . . .	L Near	 00000045 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hareWinMsg . . . . . . . . . . .	Byte	 0000006A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
ouchMsg  . . . . . . . . . . . .	Byte	 00000048 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
secMsg . . . . . . . . . . . . .	Byte	 0000009B _DATA	
startMsg . . . . . . . . . . . .	Byte	 000000A6 _DATA	
tieMsg . . . . . . . . . . . . .	Byte	 0000007D _DATA	
timeMsg  . . . . . . . . . . . .	Byte	 0000008B _DATA	
track  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
turtleWinMsg . . . . . . . . . .	Byte	 00000050 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
